  <h2>
   Modifications to XHTML+RDFa
  </h2>
  <p>
   <em>This section is normative.</em>
  </p>
  <p>
   The [<a href="http://www.w3.org/TR/rdfa-syntax/">XHTML+RDFa</a>]
   Recommendation is the base document on which this specification builds. 
   XHTML+RDFa specifies the attributes, in
   <a href="http://www.w3.org/TR/rdfa-syntax/#rdfa-attributes">Section 2.1: The RDFa Attributes</a>,
   and processing model, in  
   <a href="http://www.w3.org/TR/rdfa-syntax/#s_model">Section 5: Processing Model</a>,
   for extracting
   RDF from an XHTML document. This section specifies changes to the
   attributes and processing model defined in XHTML+RDFa in order to
   support extracting RDF from HTML documents.
  </p>
  <p>
   The requirements and rules, as specified in XHTML+RDFa and further 
   modified in this document, apply to all HTML5 documents. The RDFa Processor 
   operating on HTML and XHTML documents, specifically the resulting DOMs, 
   must apply the same processing rules for both types of serializations and 
   DOMs.
  </p>

  <h3>Specifying the language for a literal</h3>
  <p>
   The <code>lang</code> attribute must be processed in the same manner 
   as the <code>xml:lang</code> attribute is in the XHTML+RDFa specification,
   <a href="http://www.w3.org/TR/rdfa-syntax/#sec_5.5.">Section 5.5: Sequence</a>, 
   step #3.
  </p>
   The rules for determining the language of a node are specified in the
   section titled 
   <a href="http://www.w3.org/TR/html5/Overview.html#the-lang-and-xml:lang-attributes">The lang and xml:lang attributes</a> in the HTML5 specification.
  </p>
  <p>
   If an author is editing an HTML fragment and is unsure of the final 
   encapsulating MIME type for their markup, it is suggested that the 
   author specify both <code>lang</code> and <code>xml:lang</code> where the 
   value in both attributes is exactly the same.
  </p>

  <h3>Invalid XMLLiteral values</h3>
  <p>
   When generating literals of type XMLLiteral, the processor must ensure that
   the output XMLLiteral is a namespace well-formed XML fragment. A namespace 
   well-formed XML fragment has the following properties:
   <ul>
    <li>
     The XML fragment, when placed inside of a single root element, must
     validate as well-formed XML. The normative language that describes a
     well-formed XML document is specified in 
     <a href="http://www.w3.org/TR/REC-xml/#sec-well-formed">Section 2.1 "Well-Formed XML Documents"</a> 
     of the XML specification.
    </li>
    <li>
     A case-insensitive match for the currently active <code>xmlns</code> 
     attribute as well as all currently active attributes starting with
     <code>xmlns:</code> must be preserved in the generated XMLLiteral. 
     This preservation must be accomplished by placing all active namespaces 
     in each top-level element in the generated XMLLiteral, taking care to
     not over-write pre-existing namespace values.
    </li>
   </ul>
   If the input is not a namespace well-formed XML fragment, the processor 
   must transform the input text in a way that ensures the well-formedness
   rules described in this section. If a sequence of characters cannot be 
   transformed into a namespace well-formed XML fragment, the triple 
   containing the XMLLiteral must not be generated.
  </p>
  <p>
   An RDFa Processor that transforms the XML fragment must use the 
   <a href="http://www.w3.org/TR/html5/Overview.html#coercing-an-html-dom-into-an-infoset">Coercing an HTML DOM into an Infoset</a> 
   rules, as specified in the HTML5 specification, prior to generating the 
   triple containing the XMLLiteral. The serialization algorithm that must
   be used for generating the XMLLiteral is normatively defined in the
   <a href="http://www.w3.org/TR/html5/Overview.html#serializing-xhtml-fragments">Serializing XHTML Fragments</a>
   section of the HTML5 specification.
  </p>
  <p>
   Transformation to a namespace well-formed XML fragment is required 
   because an application that consumes XMLLiteral data expects that 
   data to be a namespace well-formed XML fragment.
  </p>
  <p>
   The transformation requirement does not apply to input data that are
   text-only, such as literals that contain a <code>datatype</code> attribute
   with an empty value (<code>""</code>), or input data that that contain
   only text nodes.
  </p>
  <p>
   An example transformation demonstrating the preservation of namespace values is provided below. The &rarr; symbol is used to denote that the line is a continuation of the previous line and is included purely for the purposes of readability:

   <pre>
&lt;p xmlns:ex="http://example.org/vocab#" 	
   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"&gt;
 Two rectangles (the example markup for them are stored in a triple):
 &lt;svg xmlns="http://www.w3.org/2000/svg" property="ex:markup" datatype="rdf:XMLLiteral"&gt;
&rarr; &lt;rect width="300" height="100" 
&rarr; style="fill:rgb(0,0,255);stroke-width:1; stroke:rgb(0,0,0)"/&gt;
&rarr; &lt;rect width="50" height="50" 
&rarr; style="fill:rgb(255,0,0);stroke-width:2; 
&rarr; stroke:rgb(0,0,0)"/&gt;&lt;/svg&gt;
&lt;/p&gt;
   </pre>

   The markup above should produce the following triple:

   <pre>
&lt;&gt; 
   &lt;http://example.org/vocab#markup&gt;
      "&lt;rect xmlns=\"http://www.w3.org/2000/svg\" width=\"300\" 
&rarr; height=\"100\" style=\"fill:rgb(0,0,255);stroke-width:1; stroke:rgb(0,0,0)\"/&gt;
&rarr; &lt;rect xmlns=\"http://www.w3.org/2000/svg\" width=\"50\" 
&rarr; height=\"50\" style=\"fill:rgb(255,0,0);stroke-width:2; 
&rarr; stroke:rgb(0,0,0)\"/&gt;"^^http://www.w3.org/1999/02/22-rdf-syntax-ns#XMLLiteral
   </pre>

   Note the preservation of the SVG namespace by injecting a new 
   <code>xmlns</code> attribute. Since the <code>ex</code> and <code>rdf</code>
   namespaces are not used in either <code>rect</code> element, they are
   not preserved in the XMLLiteral.
  </p>

  <h3><code>xmlns:</code>-Prefixed Attributes</h3>

  <p class="XXX">
   While this section outlines xmlns: processing in RDFa, the support for
   distributed extensibility in non-XML mode HTML5 (using xmlns and xmlns:)
   is still an open issue. This section may be further modified before 
   Last Call based on progress made on the distributed extensibility issue.
  </p>

  <p>
   CURIE prefix mappings specified using attributes prepended with
   <code>xmlns:</code>
   must be processed using the rules specified in
   <a href="">Section 5.4, CURIE and URI Processing,</a> 
   contained in the XHTML+RDFa specification.
  </p>
  <p>
   Since CURIE prefix mappings have been specified using <code>xmlns:</code>, 
   and since HTML attribute names are case-insensitive, CURIE prefix names 
   declared using the <code>xmlns:</code>attribute-name pattern 
   <code>xmlns:&lt;PREFIX&gt;="&lt;URI&gt;"</code> should be specified
   using only lower-case characters. For example, the text "<code>xmlns:</code>"
   and the text in <code>"&lt;PREFIX&gt;"</code> should be lower-case only. 
   This is to ensure that 
   prefix mappings are interpreted in the same way between HTML 
   (case-insensitive attribute names) and XHTML (case-sensitive attribute
   names) document types.
  </p>
